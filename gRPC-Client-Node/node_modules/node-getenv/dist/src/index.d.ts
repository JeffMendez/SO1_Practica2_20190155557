/**
 * Get environment variate in number type.
 * If the environment variate is undefined or not a valid number, return the default value.
 * @param name Environment variate
 * @param defaults (Optional) Default value
 */
export declare function getNum(name: string): number | undefined;
export declare function getNum(name: string, defaults: number): number;
/**
 * Get environment variate in string type.
 * If the environment variate is undefined, return the default value.
 * @param name Environment variate
 * @param defaults (Optional) Default value
 */
export declare function getStr<T extends string>(name: string): T | undefined;
export declare function getStr<T extends string>(name: string, defaults: T): T;
export declare function getStr<T extends string>(name: string, defaults?: T): T | undefined;
export declare function getStr(name: string): string | undefined;
export declare function getStr(name: string, defaults: string): string;
/**
 * Get environment variate in boolean type, supported values without case sensitive:
 *   Truly: 'true', 'yes', 'on', 'open', 't', 'y', '1'.
 *   Falsely: 'false', 'no', 'off', 'close', 'f', 'n', '0'.
 * If the environment variate is undefined or unsupported, return the default value.
 * @param name Environment variate
 * @param defaults (Optional) Default value
 */
export declare function getBool(name: string): boolean | undefined;
export declare function getBool(name: string, defaults: boolean): boolean;
declare type Binded<T> = {
    [P in keyof T]: T[P] extends undefined ? string | undefined : T[P];
};
export declare function bindEnv<T>(defaultEnvs: T): Binded<T>;
export declare function requireStr<T extends string>(env: string): T;
export declare function requireNum(env: string): number;
export declare function requireBool(env: string): boolean;
export declare function requireStrOrExit(env: string): string;
export declare function requireNumOrExit(env: string): number;
export declare function requireBoolOrExit(env: string): Boolean;
export {};
