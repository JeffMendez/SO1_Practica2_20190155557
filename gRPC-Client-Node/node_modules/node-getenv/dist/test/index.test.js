"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const errors_1 = require("../src/errors");
const env = require("../src/index");
ava_1.default.serial('test getNum', t => {
    const key = 'TEST_GET_ENV_NUM';
    t.is(env.getNum(key), undefined);
    t.is(env.getNum(key, 2), 2);
    process.env[key] = '1';
    t.is(env.getNum(key), 1);
    t.is(env.getNum(key, 2), 1);
    process.env[key] = '0';
    t.is(env.getNum(key), 0);
    t.is(env.getNum(key, 2), 0);
    process.env[key] = 'other_value';
    t.is(env.getNum(key), undefined);
    t.is(env.getNum(key, 2), 2);
});
ava_1.default.serial('test getStr', t => {
    const key = 'TEST_GET_ENV_STR';
    t.is(env.getStr(key), undefined);
    t.is(env.getStr(key, 'a'), 'a');
    process.env[key] = 'b';
    t.is(env.getStr(key), 'b');
    t.is(env.getStr(key, 'a'), 'b');
    let expect = env.getStr(key);
    let expect2 = env.getStr(key, 'a');
});
ava_1.default.serial('test getBool', t => {
    const key = 'TEST_GET_ENV_BOOL';
    t.is(env.getBool(key), undefined);
    t.is(env.getBool(key, true), true);
    process.env[key] = 'true';
    t.is(env.getBool(key), true);
    t.is(env.getBool(key, false), true);
    process.env[key] = 'Open';
    t.is(env.getBool(key), true);
    t.is(env.getBool(key, false), true);
    process.env[key] = 'YES';
    t.is(env.getBool(key), true);
    t.is(env.getBool(key, false), true);
    process.env[key] = 'T';
    t.is(env.getBool(key), true);
    t.is(env.getBool(key, false), true);
    process.env[key] = 'y';
    t.is(env.getBool(key), true);
    t.is(env.getBool(key, false), true);
    process.env[key] = 'false';
    t.is(env.getBool(key), false);
    t.is(env.getBool(key, true), false);
    process.env[key] = 'CLOSE';
    t.is(env.getBool(key), false);
    t.is(env.getBool(key, true), false);
    process.env[key] = 'no';
    t.is(env.getBool(key), false);
    t.is(env.getBool(key, true), false);
    process.env[key] = 'f';
    t.is(env.getBool(key), false);
    t.is(env.getBool(key, true), false);
    process.env[key] = 'n';
    t.is(env.getBool(key), false);
    t.is(env.getBool(key, true), false);
    process.env[key] = 'other_value';
    t.is(env.getBool(key), undefined);
    t.is(env.getBool(key, true), true);
});
ava_1.default.serial('test bindEnv', t => {
    process.env['bindEnv_1'] = '1';
    process.env['bindEnv_a'] = 'a';
    process.env['bindEnv_t'] = 'true';
    process.env['bindEnv_u'] = 'hello';
    const envs = env.bindEnv({
        bindEnv_1: 999999999999,
        bindEnv_2: 999999999999,
        bindEnv_a: 'zzzzzzzzzzz',
        bindEnv_b: 'zzzzzzzzzzz',
        bindEnv_t: false,
        bindEnv_f: false,
        bindEnv_u: undefined,
    });
    t.deepEqual(envs, {
        bindEnv_1: 1,
        bindEnv_2: 999999999999,
        bindEnv_a: 'a',
        bindEnv_b: 'zzzzzzzzzzz',
        bindEnv_t: true,
        bindEnv_f: false,
        bindEnv_u: 'hello',
    });
});
ava_1.default.serial('test requireNum', t => {
    const key = 'TEST_REQUIRENUM';
    const method = env.requireNum;
    t.throws(() => method(key), errors_1.NeedEnvError);
    process.env[key] = '1';
    t.notThrows(() => method(key));
    t.is(method(key), 1);
    process.env[key] = '0';
    t.notThrows(() => method(key));
    t.is(method(key), 0);
    process.env[key] = 'other_value';
    t.throws(() => method(key), errors_1.NeedEnvError);
});
ava_1.default.serial('test requireStr', t => {
    const key = 'TEST_REQUIRESTR';
    const method = env.requireStr;
    t.throws(() => method(key), errors_1.NeedEnvError);
    process.env[key] = 'b';
    t.notThrows(() => method(key));
    t.is(method(key), 'b');
    let expect = env.requireStr(key);
});
ava_1.default.serial('test requireBool', t => {
    const key = 'TEST_REQUIREBOOL';
    const method = env.requireBool;
    t.throws(() => method(key), errors_1.NeedEnvError);
    process.env[key] = 'true';
    t.notThrows(() => method(key));
    t.is(method(key), true);
    process.env[key] = 'Open';
    t.notThrows(() => method(key));
    t.is(method(key), true);
    process.env[key] = 'YES';
    t.notThrows(() => method(key));
    t.is(method(key), true);
    process.env[key] = 'T';
    t.notThrows(() => method(key));
    t.is(method(key), true);
    process.env[key] = 'y';
    t.notThrows(() => method(key));
    t.is(method(key), true);
    process.env[key] = 'false';
    t.notThrows(() => method(key));
    t.is(method(key), false);
    process.env[key] = 'CLOSE';
    t.notThrows(() => method(key));
    t.is(method(key), false);
    process.env[key] = 'no';
    t.notThrows(() => method(key));
    t.is(method(key), false);
    process.env[key] = 'f';
    t.notThrows(() => method(key));
    t.is(method(key), false);
    process.env[key] = 'n';
    t.notThrows(() => method(key));
    t.is(method(key), false);
    process.env[key] = 'other_value';
    t.throws(() => method(key), errors_1.NeedEnvError);
});
//# sourceMappingURL=index.test.js.map